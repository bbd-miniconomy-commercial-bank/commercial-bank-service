name: Database CI

on:
  workflow_call:

permissions:
  contents: read
  id-token: write

jobs:

  test_empty_db:
    name: Test Empty DB Migration
    runs-on: ubuntu-latest
    environment: Testing

    services:
      postgres:
        image: postgres:16.1
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install psql
        run: |
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql
      
      - name: Install Liquibase
        run: |
          curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase.zip
          unzip -o -d liquibase liquibase.zip
        env:
          LB_VERSION: ${{ vars.LIQUIBASE_VERSION }}
      
      - name: Create Liquibase properties file
        run: |
          echo "changelog-file: changelog.yaml" >> liquibase.properties
          echo "url: jdbc:postgresql://localhost:5432/${{ secrets.TEST_DB_NAME }}" >> liquibase.properties
          echo "username: ${{ secrets.TEST_DB_USERNAME }}" >> liquibase.properties
          echo "password: ${{ secrets.TEST_DB_PASSWORD }}" >> liquibase.properties

      - name: Test migration and rollback
        run: ./liquibase/liquibase update-testing-rollback --rollback-on-error=true

  test_prod_db:
    name: Test Replica DB Migration
    runs-on: ubuntu-latest
    environment: Testing

    services:
      postgres:
        image: postgres:16.1
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: DB_SCHEMA_CI_GitHub_to_AWS_via_FederatedOIDC

      - name: Install psql
        run: |
          sudo apt install wget ca-certificates
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql
          sudo ln -s /usr/lib/postgresql/16/bin/pg_dump /usr/bin/pg_dump --force
      
      - name: Install Liquibase
        run: |
          curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase.zip
          unzip -o -d liquibase liquibase.zip
        env:
          LB_VERSION: ${{ vars.LIQUIBASE_VERSION }}

      - name: Get DB credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.1
        with:
          secret-ids: |
            DB_DETAILS, rds*
          parse-json-secrets: true

      - name: Fetch AWS RDS endpoint
        run: |
          echo "DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ env.DB_DEPLOYED_INSTANCE_NAME }} --query 'DBInstances[0].Endpoint.Address' --output text)" >> $GITHUB_ENV

      - name: Create PROD DB replica
        run: |
          export PGPASSWORD=${{ env.DB_DETAILS_PASSWORD }}
          pg_dump "postgresql://${{ env.DB_DETAILS_USERNAME }}@${{ env.DB_ENDPOINT }}/dbname" > dump.sql
          export PGPASSWORD="${{ secrets.TEST_DB_PASSWORD }}"
          psql "postgresql://${{ secrets.TEST_DB_USERNAME }}@localhost:5432/${{ secrets.TEST_DB_NAME }}" -f dump.sql
          
      - name: Create Liquibase properties file
        run: |
          echo "changelog-file: changelog.yaml" >> liquibase.properties
          echo "url: jdbc:postgresql://localhost:5432/${{ secrets.TEST_DB_NAME }}" >> liquibase.properties
          echo "username: ${{ secrets.TEST_DB_USERNAME }}" >> liquibase.properties
          echo "password: ${{ secrets.TEST_DB_PASSWORD }}" >> liquibase.properties

      - name: Test migration and rollback
        run: ./liquibase/liquibase update-testing-rollback --rollback-on-error=true