name: Database CI/CD

on:
  workflow_call:

permissions:
  checks: write
  contents: read
  id-token: write

env:
  db_directory: ./sql

jobs:
  migrate_db:
    name: Migrate DB
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: eu-west-1
          role-session-name: DB_SCHEMA_CD_GitHub_to_AWS_via_FederatedOIDC

      - name: Get DB credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.1
        with:
          secret-ids: |
            DB_DETAILS, rds*
          parse-json-secrets: true

      - name: Fetch AWS RDS endpoint
        run: |
          echo "DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_NAME }} --query 'DBInstances[0].Endpoint.Address' --output text)" >> $GITHUB_ENV
    
      - name: Install Liquibase
        run: |
          curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase.zip
          unzip -o -d liquibase liquibase.zip
        env:
          LB_VERSION: ${{ vars.LIQUIBASE_VERSION }}
        
      - name: Create Liquibase properties file
        run: |
          echo "changelog-file: db-changelog.yaml" >> liquibase.properties
          echo "url: jdbc:postgresql://${{ env.DB_ENDPOINT }}:5432/prod" >> liquibase.properties
          echo "username: ${{ env.DB_DETAILS_PASSWORD }}" >> liquibase.properties
          echo "password: ${{ env.DB_DETAILS_USERNAME }}" >> liquibase.properties

      - name: Migrate DB schema
        run: ./liquibase/liquibase update-testing-rollback --rollback-on-error=true